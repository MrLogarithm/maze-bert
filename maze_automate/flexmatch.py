# will be using word2vec soon

# import gensim
# from nltk.corpus import brown
from helper_new import strip_punct

# model = gensim.models.Word2Vec.load('brown.embedding')
# model = gensim.models.Word2Vec(brown.sents())
# model.save('brown.embedding')


def union_find(u, parent):
    if parent[u] is None:
        return u
    else:
        parent[u] = union_find(parent[u], parent)
        return parent[u]


def match(sentence_set, threshold=0.8):
    words = []
    similarity = {}
    for i in range(len(sentence_set)):
        words.extend(sentence_set[i].split(" "))
    parent = [None]*len(words)
    for i in range(len(words)):
        for j in range(len(words)):
            (words[i], _, _, _) = strip_punct(words[i])
            (words[j], _, _, _) = strip_punct(words[j])
            # TODO: get similarity
            value = int(words[i] == words[j])
            if value not in similarity:
                similarity[value] = [(i, j)]
            else:
                similarity[value].append((i, j))
    for sim in reversed(sorted(similarity.keys())):
        # merge into sets
        if sim < threshold:
            break
        for i in range(len(similarity[sim])):
            (u, v) = similarity[sim][i]
            u = union_find(u, parent)
            v = union_find(v, parent)
            if u != v:
                parent[u] = v

    cnt = 0
    id = 0
    assign_id = {}
    matching = []
    for i in range(len(sentence_set)):
        matching.append([])
        for j in range(len(sentence_set[i].split(" "))):
            if union_find(cnt, parent) not in assign_id:
                assign_id[union_find(cnt, parent)] = id
                id += 1
            matching[i].append(assign_id[union_find(cnt, parent)])
            cnt += 1
    print("Autogenerated matching")
    print(matching)
    return matching